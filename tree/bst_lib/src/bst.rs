/* automatically generated by rust-bindgen 0.58.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Node {
    pub val: ::std::os::raw::c_int,
    pub left: *mut Node,
    pub right: *mut Node,
}
#[test]
fn bindgen_test_layout_Node() {
    assert_eq!(
        ::std::mem::size_of::<Node>(),
        24usize,
        concat!("Size of: ", stringify!(Node))
    );
    assert_eq!(
        ::std::mem::align_of::<Node>(),
        8usize,
        concat!("Alignment of ", stringify!(Node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Node>())).val as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Node), "::", stringify!(val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Node>())).left as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Node),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Node>())).right as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Node),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BST {
    pub root: *mut Node,
}
#[test]
fn bindgen_test_layout_BST() {
    assert_eq!(
        ::std::mem::size_of::<BST>(),
        8usize,
        concat!("Size of: ", stringify!(BST))
    );
    assert_eq!(
        ::std::mem::align_of::<BST>(),
        8usize,
        concat!("Alignment of ", stringify!(BST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BST>())).root as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(BST), "::", stringify!(root))
    );
}
extern "C" {
    pub fn new_bst() -> *mut BST;
}
extern "C" {
    pub fn insert(tree: *mut BST, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn preorder(tree: *const BST);
}
extern "C" {
    pub fn inorder(tree: *const BST);
}
extern "C" {
    pub fn postorder(tree: *const BST);
}
extern "C" {
    pub fn remove_val(tree: *mut BST, val: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_bst(tree: *mut BST);
}
